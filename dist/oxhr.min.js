export{Oxhr};var XhrReadyState;!function(e){e[e.UNSENT=0]="UNSENT",e[e.OPENED=1]="OPENED",e[e.HEADERS_RECEIVED=2]="HEADERS_RECEIVED",e[e.LOADING=3]="LOADING",e[e.DONE=4]="DONE"}(XhrReadyState||(XhrReadyState={}));class Oxhr{constructor(e){this._xhr=new XMLHttpRequest,this._eventHandlersAssigned=!1,this._httpExecutor=(e,t)=>{const s=s=>{this._xhr.status>=200&&this._xhr.status<300?(e(this._xhr.response),this.params.consoleInfo&&console.group(this.params.consoleInfo),console.log(`${s.loaded} bytes loaded.`),this.params.consoleInfo&&console.groupEnd()):t(new Error(`HTML status code ${this._xhr.status}`))},r=e=>{t(new Error("Oxhr: failed to send request!")),this.params.consoleInfo&&console.group(this.params.consoleInfo),console.log(e),console.error(`xhr status: ${this._xhr.status}`),this.params.consoleInfo&&console.groupEnd()},o=e=>{if(e.lengthComputable){const t=e.loaded/e.total*100;this.params.onProgress&&this.params.onProgress(t,e.loaded)}else this.params.onProgress&&this.params.onProgress(-1,e.loaded)},n=()=>{t(new Error("TimeoutError"))},a=()=>{console.log("Oxhr: removing event listeners"),this._xhr.removeEventListener("load",s),this._xhr.removeEventListener("loadend",a),this._xhr.removeEventListener("error",r),this._xhr.removeEventListener("progress",o),this.params.onLoadEnd&&this._xhr.removeEventListener("loadend",this.params.onLoadEnd),this.params.onAbort&&this._xhr.removeEventListener("abort",this.params.onAbort),this.params.onTimeOut?this._xhr.removeEventListener("timeout",this.params.onTimeOut):this._xhr.removeEventListener("timeout",n),this._eventHandlersAssigned=!1};this._xhr.open(this.method,this.params.url),this.params.requestHeaders&&this.params.requestHeaders.forEach((e=>{""!==e.header&&""!==e.value&&(console.log(`Oxhr: setting custom request header '${e.header}, ${e.value}'`),this._xhr.setRequestHeader(e.header,e.value))})),this._xhr.timeout=this.params.timeoutMs??6e4,this._xhr.responseType=this.responseType,this._eventHandlersAssigned||(this._eventHandlersAssigned=!0,console.log("Oxhr: adding event listeners"),this._xhr.addEventListener("load",s),this._xhr.addEventListener("loadend",a),this._xhr.addEventListener("error",r),this._xhr.addEventListener("progress",o),this.params.onLoadEnd&&this._xhr.addEventListener("loadend",this.params.onLoadEnd),this.params.onAbort&&this._xhr.addEventListener("abort",this.params.onAbort),this.params.onTimeOut?this._xhr.addEventListener("timeout",this.params.onTimeOut):this._xhr.addEventListener("timeout",n)),this._xhr.readyState!==XhrReadyState.OPENED&&console.log("Oxhr warning: connection not opened, this will cause an error."),this._xhr.send(this._data)},this.params=e,this.method=e.method??"GET",this._data=e.data??null,this.responseType=e.responseType??""}get readyState(){return this._xhr.readyState}send(e){if(this._xhr.readyState===XhrReadyState.LOADING)throw{message:"A connection is already running."};return this._data=e??this._data,new Promise(this._httpExecutor)}abort(){this._xhr.readyState===XhrReadyState.LOADING?(console.log("Aborting connection..."),this._xhr.abort()):console.log("Cannot abort, no connection running")}}