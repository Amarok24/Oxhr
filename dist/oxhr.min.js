/*
Oxhr v1.0.3
An object-oriented XHR (XMLHttpRequest) wrapper/library.
Copyright 2021 Jan Prazak, https://github.com/Amarok24/Oxhr

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
export{Oxhr};class Oxhr{constructor(s){this._xhr=new XMLHttpRequest,this.connectionRunning=!1,this.httpExecutor=(s,t)=>{const e=()=>{t(new Error("TimeoutError")),this.connectionRunning=!1};this._xhr.open(this.method,this.params.url),this.params.requestHeaders&&this.params.requestHeaders.forEach((s=>{""!==s.header&&""!==s.value&&(console.log(`Setting custom request header '${s.header}, ${s.value}'`),this._xhr.setRequestHeader(s.header,s.value))})),this._xhr.timeout=this.params.timeoutMs??6e4,this._xhr.responseType=this.responseType,this._xhr.addEventListener("load",(e=>{console.log("handleLoad"),this._xhr.status>=200&&this._xhr.status<300?(s(this._xhr.response),this.params.consoleInfo&&console.group(this.params.consoleInfo),console.log(`${e.loaded} bytes loaded.`),this.params.consoleInfo&&console.groupEnd()):t(new Error(`HTML status code ${this._xhr.status}`)),this.connectionRunning=!1})),this._xhr.addEventListener("error",(s=>{t(new Error("Oxhr: failed to send request!")),this.params.consoleInfo&&console.group(this.params.consoleInfo),console.log(s),console.error(`xhr status: ${this._xhr.status}`),this.params.consoleInfo&&console.groupEnd(),this.connectionRunning=!1})),this._xhr.addEventListener("progress",(s=>{if(s.lengthComputable){const t=s.loaded/s.total*100;this.params.onProgress&&this.params.onProgress(t,s.loaded)}else this.params.onProgress&&this.params.onProgress(-1,s.loaded)})),this.params.onLoadEnd&&this._xhr.addEventListener("loadend",this.params.onLoadEnd),this.params.onAbort&&this._xhr.addEventListener("abort",this.params.onAbort),this.params.onTimeOut?this._xhr.addEventListener("timeout",this.params.onTimeOut):this._xhr.addEventListener("timeout",e),this._xhr.send(this._data)},this.params=s,this.method=s.method??"get",this._data=s.data??null,this.responseType=s.responseType??""}send(s){if(this.connectionRunning)throw{message:"A connection is already running."};return this._data=s??this._data,this.connectionRunning=!0,new Promise(this.httpExecutor)}abort(){this.connectionRunning?(console.log("Aborting connection..."),this._xhr.abort(),this.connectionRunning=!1):console.log("No connection to abort.")}}
